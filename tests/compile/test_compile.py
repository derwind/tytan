import unittest

import numpy as np
from tytan import (Auto_array, Compile, sampler, symbols, symbols_define,
                   symbols_list, symbols_nbit)


def are_same_qubo_matrices(qubo1, qubo2):
    if len(qubo1) != len(qubo2):
        return False

    eps = 1e-10

    qubo2 = qubo2.copy()

    for k, v in qubo1.items():
        if k in qubo2 and abs(qubo2[k] - v) < eps:
            del qubo2[k]
            continue
        k = (k[1], k[0])
        if k in qubo2 and abs(qubo2[k] - v) < eps:
            del qubo2[k]
    return qubo2 == {}


class TestCompile(unittest.TestCase):
    def test_maxcut1(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')

        #3個の量子ビットから2個を1にする
        H = (q0 + q1 + q2 - 2)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q0', 'q0'): -3.0,
            ('q1', 'q1'): -3.0,
            ('q2', 'q2'): -3.0,
            ('q0', 'q1'): 2.0,
            ('q0', 'q2'): 2.0,
            ('q1', 'q2'): 2.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 4)

    def test_maxcut2(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')
        q3 = symbols('q3')
        q4 = symbols('q4')

        #友達関係において、違うバスに乗せたい（＝2個の量子ビットを0,1逆にしたい）（＝2個の量子ビットから1個を1にしたい）
        H = 0
        H += (q0 + q1 - 1)**2
        H += (q0 + q2 - 1)**2
        H += (q1 + q3 - 1)**2
        H += (q2 + q3 - 1)**2
        H += (q2 + q4 - 1)**2
        H += (q3 + q4 - 1)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q2', 'q2'): -3.0,
            ('q3', 'q3'): -3.0,
            ('q0', 'q0'): -2.0,
            ('q1', 'q1'): -2.0,
            ('q4', 'q4'): -2.0,
            ('q0', 'q1'): 2.0,
            ('q0', 'q2'): 2.0,
            ('q1', 'q3'): 2.0,
            ('q2', 'q3'): 2.0,
            ('q2', 'q4'): 2.0,
            ('q3', 'q4'): 2.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 6)

    def test_thermometer1(self):
        #量子ビットを用意する
        q00 = symbols('q00')
        q01 = symbols('q01')
        q02 = symbols('q02')
        q03 = symbols('q03')
        q04 = symbols('q04')
        q05 = symbols('q05')
        q06 = symbols('q06')
        q07 = symbols('q07')
        q08 = symbols('q08')
        q09 = symbols('q09')
        q10 = symbols('q10')
        q11 = symbols('q11')
        q12 = symbols('q12')
        q13 = symbols('q13')
        q14 = symbols('q14')
        q15 = symbols('q15')

        #各行、「4個から指定の個数だけ1になる」
        H = 0
        H += (q00 + q01 + q02 + q03 - 2)**2
        H += (q04 + q05 + q06 + q07 - 1)**2
        H += (q08 + q09 + q10 + q11 - 3)**2
        H += (q12 + q13 + q14 + q15 - 1)**2

        #各列、「4個から指定の個数だけ1になる」
        H += (q00 + q04 + q08 + q12 - 3)**2
        H += (q01 + q05 + q09 + q13 - 1)**2
        H += (q02 + q06 + q10 + q14 - 1)**2
        H += (q03 + q07 + q11 + q15 - 2)**2

        #各温度計、球部から降順になる
        H += (1 - q08) * q04
        H += (1 - q04) * q00 #8→4→0の連鎖

        H += (1 - q05) * q01

        H += (1 - q03) * q02

        H += (1 - q07) * q06

        H += (1 - q11) * q10
        H += (1 - q10) * q09 #11→10→9の連鎖

        H += (1 - q13) * q12

        H += (1 - q15) * q14

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q06', 'q06'): -1.0,
            ('q14', 'q14'): -1.0,
            ('q08', 'q08'): -10.0,
            ('q11', 'q11'): -8.0,
            ('q00', 'q00'): -7.0,
            ('q03', 'q03'): -6.0,
            ('q04', 'q04'): -5.0,
            ('q09', 'q09'): -5.0,
            ('q10', 'q10'): -5.0,
            ('q12', 'q12'): -5.0,
            ('q07', 'q07'): -4.0,
            ('q15', 'q15'): -4.0,
            ('q01', 'q01'): -3.0,
            ('q02', 'q02'): -3.0,
            ('q05', 'q05'): -2.0,
            ('q13', 'q13'): -2.0,
            ('q00', 'q04'): 1.0,
            ('q01', 'q05'): 1.0,
            ('q02', 'q03'): 1.0,
            ('q04', 'q08'): 1.0,
            ('q06', 'q07'): 1.0,
            ('q09', 'q10'): 1.0,
            ('q10', 'q11'): 1.0,
            ('q12', 'q13'): 1.0,
            ('q14', 'q15'): 1.0,
            ('q00', 'q01'): 2.0,
            ('q00', 'q02'): 2.0,
            ('q00', 'q03'): 2.0,
            ('q00', 'q08'): 2.0,
            ('q00', 'q12'): 2.0,
            ('q01', 'q02'): 2.0,
            ('q01', 'q03'): 2.0,
            ('q01', 'q09'): 2.0,
            ('q01', 'q13'): 2.0,
            ('q02', 'q06'): 2.0,
            ('q02', 'q10'): 2.0,
            ('q02', 'q14'): 2.0,
            ('q03', 'q07'): 2.0,
            ('q03', 'q11'): 2.0,
            ('q03', 'q15'): 2.0,
            ('q04', 'q05'): 2.0,
            ('q04', 'q06'): 2.0,
            ('q04', 'q07'): 2.0,
            ('q04', 'q12'): 2.0,
            ('q05', 'q06'): 2.0,
            ('q05', 'q07'): 2.0,
            ('q05', 'q09'): 2.0,
            ('q05', 'q13'): 2.0,
            ('q06', 'q10'): 2.0,
            ('q06', 'q14'): 2.0,
            ('q07', 'q11'): 2.0,
            ('q07', 'q15'): 2.0,
            ('q08', 'q09'): 2.0,
            ('q08', 'q10'): 2.0,
            ('q08', 'q11'): 2.0,
            ('q08', 'q12'): 2.0,
            ('q09', 'q11'): 2.0,
            ('q09', 'q13'): 2.0,
            ('q10', 'q14'): 2.0,
            ('q11', 'q15'): 2.0,
            ('q12', 'q14'): 2.0,
            ('q12', 'q15'): 2.0,
            ('q13', 'q14'): 2.0,
            ('q13', 'q15'): 2.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 30)

    def test_thermometer2(self):
        #量子ビットを用意する
        q = symbols_list([4, 4], 'q{}_{}')

        #各行、「4個から指定の個数だけ1になる」
        H = 0
        H += (q[0][0] + q[0][1] + q[0][2] + q[0][3] - 2)**2
        H += (q[1][0] + q[1][1] + q[1][2] + q[1][3] - 1)**2
        H += (q[2][0] + q[2][1] + q[2][2] + q[2][3] - 3)**2
        H += (q[3][0] + q[3][1] + q[3][2] + q[3][3] - 1)**2

        #各列、「4個から指定の個数だけ1になる」
        H += (q[0][0] + q[1][0] + q[2][0] + q[3][0] - 3)**2
        H += (q[0][1] + q[1][1] + q[2][1] + q[3][1] - 1)**2
        H += (q[0][2] + q[1][2] + q[2][2] + q[3][2] - 1)**2
        H += (q[0][3] + q[1][3] + q[2][3] + q[3][3] - 2)**2

        #各温度計、球部から降順になる
        H += (1 - q[2][0]) * q[1][0]
        H += (1 - q[1][0]) * q[0][0] #8→4→0の連鎖

        H += (1 - q[1][1]) * q[0][1]

        H += (1 - q[0][3]) * q[0][2]

        H += (1 - q[1][3]) * q[1][2]

        H += (1 - q[2][3]) * q[2][2]
        H += (1 - q[2][2]) * q[2][1] #11→10→9の連鎖

        H += (1 - q[3][1]) * q[3][0]

        H += (1 - q[3][3]) * q[3][2]

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q1_2', 'q1_2'): -1.0,
            ('q3_2', 'q3_2'): -1.0,
            ('q2_0', 'q2_0'): -10.0,
            ('q2_3', 'q2_3'): -8.0,
            ('q0_0', 'q0_0'): -7.0,
            ('q0_3', 'q0_3'): -6.0,
            ('q1_0', 'q1_0'): -5.0,
            ('q2_1', 'q2_1'): -5.0,
            ('q2_2', 'q2_2'): -5.0,
            ('q3_0', 'q3_0'): -5.0,
            ('q1_3', 'q1_3'): -4.0,
            ('q3_3', 'q3_3'): -4.0,
            ('q0_1', 'q0_1'): -3.0,
            ('q0_2', 'q0_2'): -3.0,
            ('q1_1', 'q1_1'): -2.0,
            ('q3_1', 'q3_1'): -2.0,
            ('q0_0', 'q1_0'): 1.0,
            ('q0_1', 'q1_1'): 1.0,
            ('q0_2', 'q0_3'): 1.0,
            ('q1_0', 'q2_0'): 1.0,
            ('q1_2', 'q1_3'): 1.0,
            ('q2_1', 'q2_2'): 1.0,
            ('q2_2', 'q2_3'): 1.0,
            ('q3_0', 'q3_1'): 1.0,
            ('q3_2', 'q3_3'): 1.0,
            ('q0_0', 'q0_1'): 2.0,
            ('q0_0', 'q0_2'): 2.0,
            ('q0_0', 'q0_3'): 2.0,
            ('q0_0', 'q2_0'): 2.0,
            ('q0_0', 'q3_0'): 2.0,
            ('q0_1', 'q0_2'): 2.0,
            ('q0_1', 'q0_3'): 2.0,
            ('q0_1', 'q2_1'): 2.0,
            ('q0_1', 'q3_1'): 2.0,
            ('q0_2', 'q1_2'): 2.0,
            ('q0_2', 'q2_2'): 2.0,
            ('q0_2', 'q3_2'): 2.0,
            ('q0_3', 'q1_3'): 2.0,
            ('q0_3', 'q2_3'): 2.0,
            ('q0_3', 'q3_3'): 2.0,
            ('q1_0', 'q1_1'): 2.0,
            ('q1_0', 'q1_2'): 2.0,
            ('q1_0', 'q1_3'): 2.0,
            ('q1_0', 'q3_0'): 2.0,
            ('q1_1', 'q1_2'): 2.0,
            ('q1_1', 'q1_3'): 2.0,
            ('q1_1', 'q2_1'): 2.0,
            ('q1_1', 'q3_1'): 2.0,
            ('q1_2', 'q2_2'): 2.0,
            ('q1_2', 'q3_2'): 2.0,
            ('q1_3', 'q2_3'): 2.0,
            ('q1_3', 'q3_3'): 2.0,
            ('q2_0', 'q2_1'): 2.0,
            ('q2_0', 'q2_2'): 2.0,
            ('q2_0', 'q2_3'): 2.0,
            ('q2_0', 'q3_0'): 2.0,
            ('q2_1', 'q2_3'): 2.0,
            ('q2_1', 'q3_1'): 2.0,
            ('q2_2', 'q3_2'): 2.0,
            ('q2_3', 'q3_3'): 2.0,
            ('q3_0', 'q3_2'): 2.0,
            ('q3_0', 'q3_3'): 2.0,
            ('q3_1', 'q3_2'): 2.0,
            ('q3_1', 'q3_3'): 2.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 30)

    def test_balanced_numbers1(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')
        q3 = symbols('q3')
        q4 = symbols('q4')
        q5 = symbols('q5')

        #グループA（＝1になった量子ビット）は合計130
        H = 0
        H += (15*q0 + 25*q1 + 33*q2 + 41*q3 + 64*q4 + 82*q5 - 130)**2

        #グループB（＝0になった量子ビット）は合計130
        H += (15*(1-q0) + 25*(1-q1) + 33*(1-q2) + 41*(1-q3) + 64*(1-q4) + 82*(1-q5) - 130)**2


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q5', 'q5'): -29192.0,
            ('q4', 'q4'): -25088.0,
            ('q3', 'q3'): -17958.0,
            ('q2', 'q2'): -14982.0,
            ('q1', 'q1'): -11750.0,
            ('q0', 'q0'): -7350.0,
            ('q0', 'q1'): 1500.0,
            ('q0', 'q2'): 1980.0,
            ('q0', 'q3'): 2460.0,
            ('q1', 'q2'): 3300.0,
            ('q0', 'q4'): 3840.0,
            ('q1', 'q3'): 4100.0,
            ('q0', 'q5'): 4920.0,
            ('q2', 'q3'): 5412.0,
            ('q1', 'q4'): 6400.0,
            ('q1', 'q5'): 8200.0,
            ('q2', 'q4'): 8448.0,
            ('q3', 'q4'): 10496.0,
            ('q2', 'q5'): 10824.0,
            ('q3', 'q5'): 13448.0,
            ('q4', 'q5'): 20992.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 33800)

    def test_balanced_numbers2(self):
        #数字
        numbers = np.array([15, 25, 33, 41, 64, 82])

        #QUBO変数を用意する→[0, 1]の変数
        q = symbols_list(6, 'q{}')

        #まとめてイジング変数に変換→[-1, +1]の変数
        z = 2*q - 1

        # イジング変数は-1か+1である。イジング変数配列と数字配列の内積が0になればよい
        # H = (15*z0 + 25*z1 + 33*z2 + 41*z3 + 64*z4 + 82*z5 - 0)**2　ということ
        H = sum(numbers * z)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q5', 'q5'): -58384.0,
            ('q4', 'q4'): -50176.0,
            ('q3', 'q3'): -35916.0,
            ('q2', 'q2'): -29964.0,
            ('q1', 'q1'): -23500.0,
            ('q0', 'q0'): -14700.0,
            ('q0', 'q1'): 3000.0,
            ('q0', 'q2'): 3960.0,
            ('q0', 'q3'): 4920.0,
            ('q1', 'q2'): 6600.0,
            ('q0', 'q4'): 7680.0,
            ('q1', 'q3'): 8200.0,
            ('q0', 'q5'): 9840.0,
            ('q2', 'q3'): 10824.0,
            ('q1', 'q4'): 12800.0,
            ('q1', 'q5'): 16400.0,
            ('q2', 'q4'): 16896.0,
            ('q3', 'q4'): 20992.0,
            ('q2', 'q5'): 21648.0,
            ('q3', 'q5'): 26896.0,
            ('q4', 'q5'): 41984.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 67600)

    def test_schedule_optimization(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')
        q3 = symbols('q3')
        q4 = symbols('q4')
        q5 = symbols('q5')
        q6 = symbols('q6')
        q7 = symbols('q7')

        #各時間帯とも、パワー合計が2になる
        H = 0
        H += (q0 + q1 + 2*q5 - 2)**2
        H += (q2 + 2*q6 - 2)**2
        H += (q3 + 2*q7 - 2)**2
        H += (q1 + q3 + q4 - 2)**2
        H += (q0 + q2 + q4 - 2)**2


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q0', 'q0'): -6.0,
            ('q1', 'q1'): -6.0,
            ('q2', 'q2'): -6.0,
            ('q3', 'q3'): -6.0,
            ('q4', 'q4'): -6.0,
            ('q5', 'q5'): -4.0,
            ('q6', 'q6'): -4.0,
            ('q7', 'q7'): -4.0,
            ('q0', 'q1'): 2.0,
            ('q0', 'q2'): 2.0,
            ('q0', 'q4'): 2.0,
            ('q1', 'q3'): 2.0,
            ('q1', 'q4'): 2.0,
            ('q2', 'q4'): 2.0,
            ('q3', 'q4'): 2.0,
            ('q0', 'q5'): 4.0,
            ('q1', 'q5'): 4.0,
            ('q2', 'q6'): 4.0,
            ('q3', 'q7'): 4.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 20)

    def test_drawings1(self):
        #量子ビットを用意する
        q00 = symbols('q00')
        q01 = symbols('q01')
        q02 = symbols('q02')
        q03 = symbols('q03')
        q04 = symbols('q04')
        q05 = symbols('q05')
        q06 = symbols('q06')
        q07 = symbols('q07')
        q08 = symbols('q08')
        q09 = symbols('q09')
        q10 = symbols('q10')
        q11 = symbols('q11')
        q12 = symbols('q12')
        q13 = symbols('q13')
        q14 = symbols('q14')
        q15 = symbols('q15')
        q16 = symbols('q16')
        q17 = symbols('q17')
        q18 = symbols('q18')
        q19 = symbols('q19')
        q20 = symbols('q20')
        q21 = symbols('q21')
        q22 = symbols('q22')
        q23 = symbols('q23')
        q24 = symbols('q24')

        #各行、個数の制約
        H = 0
        H += (q00 + q01 + q02 + q03 + q04 - 2)**2
        H += (q05 + q06 + q07 + q08 + q09 - 3)**2
        H += (q10 + q11 + q12 + q13 + q14 - 3)**2
        H += (q15 + q16 + q17 + q18 + q19 - 3)**2
        H += (q20 + q21 + q22 + q23 + q24 - 2)**2

        #各列、個数の制約
        H += (q00 + q05 + q10 + q15 + q20 - 3)**2
        H += (q01 + q06 + q11 + q16 + q21 - 2)**2
        H += (q02 + q07 + q12 + q17 + q22 - 5)**2
        H += (q03 + q08 + q13 + q18 + q23 - 2)**2
        H += (q04 + q09 + q14 + q19 + q24 - 1)**2

        #各行、連続の報酬
        H += -0.1 * (q00 * q01) -0.1 * (q01 * q02) -0.1 * (q02 * q03) -0.1 * (q03 * q04)
        H += -0.1 * (q05 * q06) -0.1 * (q06 * q07) -0.1 * (q07 * q08) -0.1 * (q08 * q09)
        H += -0.1 * (q10 * q11) -0.1 * (q11 * q12) -0.1 * (q12 * q13) -0.1 * (q13 * q14)
        H += -0.1 * (q15 * q16) -0.1 * (q16 * q17) -0.1 * (q17 * q18) -0.1 * (q18 * q19)
        #[1, 1]スプリットは後ほど設定

        #各列、連続の報酬
        H += -0.1 * (q00 * q05) -0.1 * (q05 * q10) -0.1 * (q10 * q15) -0.1 * (q15 * q20)
        H += -0.1 * (q01 * q06) -0.1 * (q06 * q11) -0.1 * (q11 * q16) -0.1 * (q16 * q21)
        H += -0.1 * (q02 * q07) -0.1 * (q07 * q12) -0.1 * (q12 * q17) -0.1 * (q17 * q22)
        H += -0.1 * (q03 * q08) -0.1 * (q08 * q13) -0.1 * (q13 * q18) -0.1 * (q18 * q23)
        #[1]の列は連続設定は不要

        #[1, 1]スプリット列のペナルティ
        H += 0.1 * (q20 * q21) + 0.1 * (q21 * q22) + 0.1 * (q22 * q23) + 0.1 * (q23 * q24)


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q07', 'q07'): -14.0,
            ('q12', 'q12'): -14.0,
            ('q17', 'q17'): -14.0,
            ('q02', 'q02'): -12.0,
            ('q22', 'q22'): -12.0,
            ('q05', 'q05'): -10.0,
            ('q10', 'q10'): -10.0,
            ('q15', 'q15'): -10.0,
            ('q00', 'q00'): -8.0,
            ('q06', 'q06'): -8.0,
            ('q08', 'q08'): -8.0,
            ('q11', 'q11'): -8.0,
            ('q13', 'q13'): -8.0,
            ('q16', 'q16'): -8.0,
            ('q18', 'q18'): -8.0,
            ('q20', 'q20'): -8.0,
            ('q01', 'q01'): -6.0,
            ('q03', 'q03'): -6.0,
            ('q09', 'q09'): -6.0,
            ('q14', 'q14'): -6.0,
            ('q19', 'q19'): -6.0,
            ('q21', 'q21'): -6.0,
            ('q23', 'q23'): -6.0,
            ('q04', 'q04'): -4.0,
            ('q24', 'q24'): -4.0,
            ('q00', 'q02'): 2.0,
            ('q00', 'q03'): 2.0,
            ('q00', 'q04'): 2.0,
            ('q00', 'q10'): 2.0,
            ('q00', 'q15'): 2.0,
            ('q00', 'q20'): 2.0,
            ('q01', 'q03'): 2.0,
            ('q01', 'q04'): 2.0,
            ('q01', 'q11'): 2.0,
            ('q01', 'q16'): 2.0,
            ('q01', 'q21'): 2.0,
            ('q02', 'q04'): 2.0,
            ('q02', 'q12'): 2.0,
            ('q02', 'q17'): 2.0,
            ('q02', 'q22'): 2.0,
            ('q03', 'q13'): 2.0,
            ('q03', 'q18'): 2.0,
            ('q03', 'q23'): 2.0,
            ('q04', 'q09'): 2.0,
            ('q04', 'q14'): 2.0,
            ('q04', 'q19'): 2.0,
            ('q04', 'q24'): 2.0,
            ('q05', 'q07'): 2.0,
            ('q05', 'q08'): 2.0,
            ('q05', 'q09'): 2.0,
            ('q05', 'q15'): 2.0,
            ('q05', 'q20'): 2.0,
            ('q06', 'q08'): 2.0,
            ('q06', 'q09'): 2.0,
            ('q06', 'q16'): 2.0,
            ('q06', 'q21'): 2.0,
            ('q07', 'q09'): 2.0,
            ('q07', 'q17'): 2.0,
            ('q07', 'q22'): 2.0,
            ('q08', 'q18'): 2.0,
            ('q08', 'q23'): 2.0,
            ('q09', 'q14'): 2.0,
            ('q09', 'q19'): 2.0,
            ('q09', 'q24'): 2.0,
            ('q10', 'q12'): 2.0,
            ('q10', 'q13'): 2.0,
            ('q10', 'q14'): 2.0,
            ('q10', 'q20'): 2.0,
            ('q11', 'q13'): 2.0,
            ('q11', 'q14'): 2.0,
            ('q11', 'q21'): 2.0,
            ('q12', 'q14'): 2.0,
            ('q12', 'q22'): 2.0,
            ('q13', 'q23'): 2.0,
            ('q14', 'q19'): 2.0,
            ('q14', 'q24'): 2.0,
            ('q15', 'q17'): 2.0,
            ('q15', 'q18'): 2.0,
            ('q15', 'q19'): 2.0,
            ('q16', 'q18'): 2.0,
            ('q16', 'q19'): 2.0,
            ('q17', 'q19'): 2.0,
            ('q19', 'q24'): 2.0,
            ('q20', 'q22'): 2.0,
            ('q20', 'q23'): 2.0,
            ('q20', 'q24'): 2.0,
            ('q21', 'q23'): 2.0,
            ('q21', 'q24'): 2.0,
            ('q22', 'q24'): 2.0,
            ('q00', 'q01'): 1.9,
            ('q00', 'q05'): 1.9,
            ('q01', 'q02'): 1.9,
            ('q01', 'q06'): 1.9,
            ('q02', 'q03'): 1.9,
            ('q02', 'q07'): 1.9,
            ('q03', 'q04'): 1.9,
            ('q03', 'q08'): 1.9,
            ('q05', 'q06'): 1.9,
            ('q05', 'q10'): 1.9,
            ('q06', 'q07'): 1.9,
            ('q06', 'q11'): 1.9,
            ('q07', 'q08'): 1.9,
            ('q07', 'q12'): 1.9,
            ('q08', 'q09'): 1.9,
            ('q08', 'q13'): 1.9,
            ('q10', 'q11'): 1.9,
            ('q10', 'q15'): 1.9,
            ('q11', 'q12'): 1.9,
            ('q11', 'q16'): 1.9,
            ('q12', 'q13'): 1.9,
            ('q12', 'q17'): 1.9,
            ('q13', 'q14'): 1.9,
            ('q13', 'q18'): 1.9,
            ('q15', 'q16'): 1.9,
            ('q15', 'q20'): 1.9,
            ('q16', 'q17'): 1.9,
            ('q16', 'q21'): 1.9,
            ('q17', 'q18'): 1.9,
            ('q17', 'q22'): 1.9,
            ('q18', 'q19'): 1.9,
            ('q18', 'q23'): 1.9,
            ('q20', 'q21'): 2.1,
            ('q21', 'q22'): 2.1,
            ('q22', 'q23'): 2.1,
            ('q23', 'q24'): 2.1,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 78)

    def test_drawings2(self):
        #量子ビットを用意する
        q = symbols_list([5, 5], 'q{}_{}')

        #各行、個数の制約
        H = 0
        H += (q[0][0] + q[0][1] + q[0][2] + q[0][3] + q[0][4] - 2)**2
        H += (q[1][0] + q[1][1] + q[1][2] + q[1][3] + q[1][4] - 3)**2
        H += (q[2][0] + q[2][1] + q[2][2] + q[2][3] + q[2][4] - 3)**2
        H += (q[3][0] + q[3][1] + q[3][2] + q[3][3] + q[3][4] - 3)**2
        H += (q[4][0] + q[4][1] + q[4][2] + q[4][3] + q[4][4] - 2)**2

        #各列、個数の制約
        H += (q[0][0] + q[1][0] + q[2][0] + q[3][0] + q[4][0] - 3)**2
        H += (q[0][1] + q[1][1] + q[2][1] + q[3][1] + q[4][1] - 2)**2
        H += (q[0][2] + q[1][2] + q[2][2] + q[3][2] + q[4][2] - 5)**2
        H += (q[0][3] + q[1][3] + q[2][3] + q[3][3] + q[4][3] - 2)**2
        H += (q[0][4] + q[1][4] + q[2][4] + q[3][4] + q[4][4] - 1)**2

        #各行、連続の報酬
        H += -0.1 * (q[0][0] * q[0][1]) -0.1 * (q[0][1] * q[0][2]) -0.1 * (q[0][2] * q[0][3]) -0.1 * (q[0][3] * q[0][4])
        H += -0.1 * (q[1][0] * q[1][1]) -0.1 * (q[1][1] * q[1][2]) -0.1 * (q[1][2] * q[1][3]) -0.1 * (q[1][3] * q[1][4])
        H += -0.1 * (q[2][0] * q[2][1]) -0.1 * (q[2][1] * q[2][2]) -0.1 * (q[2][2] * q[2][3]) -0.1 * (q[2][3] * q[2][4])
        H += -0.1 * (q[3][0] * q[3][1]) -0.1 * (q[3][1] * q[3][2]) -0.1 * (q[3][2] * q[3][3]) -0.1 * (q[3][3] * q[3][4])
        #[1, 1]スプリットは後ほど設定

        #各列、連続の報酬
        H += -0.1 * (q[0][0] * q[1][0]) -0.1 * (q[1][0] * q[2][0]) -0.1 * (q[2][0] * q[3][0]) -0.1 * (q[3][0] * q[4][0])
        H += -0.1 * (q[0][1] * q[1][1]) -0.1 * (q[1][1] * q[2][1]) -0.1 * (q[2][1] * q[3][1]) -0.1 * (q[3][1] * q[4][1])
        H += -0.1 * (q[0][2] * q[1][2]) -0.1 * (q[1][2] * q[2][2]) -0.1 * (q[2][2] * q[3][2]) -0.1 * (q[3][2] * q[4][2])
        H += -0.1 * (q[0][3] * q[1][3]) -0.1 * (q[1][3] * q[2][3]) -0.1 * (q[2][3] * q[3][3]) -0.1 * (q[3][3] * q[4][3])
        #[1]の列は連続設定は不要

        #[1, 1]スプリット列のペナルティ
        H += 0.1 * (q[4][0] * q[4][1]) + 0.1 * (q[4][1] * q[4][2]) + 0.1 * (q[4][2] * q[4][3]) + 0.1 * (q[4][3] * q[4][4])


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q1_2', 'q1_2'): -14.0,
            ('q2_2', 'q2_2'): -14.0,
            ('q3_2', 'q3_2'): -14.0,
            ('q0_2', 'q0_2'): -12.0,
            ('q4_2', 'q4_2'): -12.0,
            ('q1_0', 'q1_0'): -10.0,
            ('q2_0', 'q2_0'): -10.0,
            ('q3_0', 'q3_0'): -10.0,
            ('q0_0', 'q0_0'): -8.0,
            ('q1_1', 'q1_1'): -8.0,
            ('q1_3', 'q1_3'): -8.0,
            ('q2_1', 'q2_1'): -8.0,
            ('q2_3', 'q2_3'): -8.0,
            ('q3_1', 'q3_1'): -8.0,
            ('q3_3', 'q3_3'): -8.0,
            ('q4_0', 'q4_0'): -8.0,
            ('q0_1', 'q0_1'): -6.0,
            ('q0_3', 'q0_3'): -6.0,
            ('q1_4', 'q1_4'): -6.0,
            ('q2_4', 'q2_4'): -6.0,
            ('q3_4', 'q3_4'): -6.0,
            ('q4_1', 'q4_1'): -6.0,
            ('q4_3', 'q4_3'): -6.0,
            ('q0_4', 'q0_4'): -4.0,
            ('q4_4', 'q4_4'): -4.0,
            ('q0_0', 'q0_2'): 2.0,
            ('q0_0', 'q0_3'): 2.0,
            ('q0_0', 'q0_4'): 2.0,
            ('q0_0', 'q2_0'): 2.0,
            ('q0_0', 'q3_0'): 2.0,
            ('q0_0', 'q4_0'): 2.0,
            ('q0_1', 'q0_3'): 2.0,
            ('q0_1', 'q0_4'): 2.0,
            ('q0_1', 'q2_1'): 2.0,
            ('q0_1', 'q3_1'): 2.0,
            ('q0_1', 'q4_1'): 2.0,
            ('q0_2', 'q0_4'): 2.0,
            ('q0_2', 'q2_2'): 2.0,
            ('q0_2', 'q3_2'): 2.0,
            ('q0_2', 'q4_2'): 2.0,
            ('q0_3', 'q2_3'): 2.0,
            ('q0_3', 'q3_3'): 2.0,
            ('q0_3', 'q4_3'): 2.0,
            ('q0_4', 'q1_4'): 2.0,
            ('q0_4', 'q2_4'): 2.0,
            ('q0_4', 'q3_4'): 2.0,
            ('q0_4', 'q4_4'): 2.0,
            ('q1_0', 'q1_2'): 2.0,
            ('q1_0', 'q1_3'): 2.0,
            ('q1_0', 'q1_4'): 2.0,
            ('q1_0', 'q3_0'): 2.0,
            ('q1_0', 'q4_0'): 2.0,
            ('q1_1', 'q1_3'): 2.0,
            ('q1_1', 'q1_4'): 2.0,
            ('q1_1', 'q3_1'): 2.0,
            ('q1_1', 'q4_1'): 2.0,
            ('q1_2', 'q1_4'): 2.0,
            ('q1_2', 'q3_2'): 2.0,
            ('q1_2', 'q4_2'): 2.0,
            ('q1_3', 'q3_3'): 2.0,
            ('q1_3', 'q4_3'): 2.0,
            ('q1_4', 'q2_4'): 2.0,
            ('q1_4', 'q3_4'): 2.0,
            ('q1_4', 'q4_4'): 2.0,
            ('q2_0', 'q2_2'): 2.0,
            ('q2_0', 'q2_3'): 2.0,
            ('q2_0', 'q2_4'): 2.0,
            ('q2_0', 'q4_0'): 2.0,
            ('q2_1', 'q2_3'): 2.0,
            ('q2_1', 'q2_4'): 2.0,
            ('q2_1', 'q4_1'): 2.0,
            ('q2_2', 'q2_4'): 2.0,
            ('q2_2', 'q4_2'): 2.0,
            ('q2_3', 'q4_3'): 2.0,
            ('q2_4', 'q3_4'): 2.0,
            ('q2_4', 'q4_4'): 2.0,
            ('q3_0', 'q3_2'): 2.0,
            ('q3_0', 'q3_3'): 2.0,
            ('q3_0', 'q3_4'): 2.0,
            ('q3_1', 'q3_3'): 2.0,
            ('q3_1', 'q3_4'): 2.0,
            ('q3_2', 'q3_4'): 2.0,
            ('q3_4', 'q4_4'): 2.0,
            ('q4_0', 'q4_2'): 2.0,
            ('q4_0', 'q4_3'): 2.0,
            ('q4_0', 'q4_4'): 2.0,
            ('q4_1', 'q4_3'): 2.0,
            ('q4_1', 'q4_4'): 2.0,
            ('q4_2', 'q4_4'): 2.0,
            ('q0_0', 'q0_1'): 1.9,
            ('q0_0', 'q1_0'): 1.9,
            ('q0_1', 'q0_2'): 1.9,
            ('q0_1', 'q1_1'): 1.9,
            ('q0_2', 'q0_3'): 1.9,
            ('q0_2', 'q1_2'): 1.9,
            ('q0_3', 'q0_4'): 1.9,
            ('q0_3', 'q1_3'): 1.9,
            ('q1_0', 'q1_1'): 1.9,
            ('q1_0', 'q2_0'): 1.9,
            ('q1_1', 'q1_2'): 1.9,
            ('q1_1', 'q2_1'): 1.9,
            ('q1_2', 'q1_3'): 1.9,
            ('q1_2', 'q2_2'): 1.9,
            ('q1_3', 'q1_4'): 1.9,
            ('q1_3', 'q2_3'): 1.9,
            ('q2_0', 'q2_1'): 1.9,
            ('q2_0', 'q3_0'): 1.9,
            ('q2_1', 'q2_2'): 1.9,
            ('q2_1', 'q3_1'): 1.9,
            ('q2_2', 'q2_3'): 1.9,
            ('q2_2', 'q3_2'): 1.9,
            ('q2_3', 'q2_4'): 1.9,
            ('q2_3', 'q3_3'): 1.9,
            ('q3_0', 'q3_1'): 1.9,
            ('q3_0', 'q4_0'): 1.9,
            ('q3_1', 'q3_2'): 1.9,
            ('q3_1', 'q4_1'): 1.9,
            ('q3_2', 'q3_3'): 1.9,
            ('q3_2', 'q4_2'): 1.9,
            ('q3_3', 'q3_4'): 1.9,
            ('q3_3', 'q4_3'): 1.9,
            ('q4_0', 'q4_1'): 2.1,
            ('q4_1', 'q4_2'): 2.1,
            ('q4_2', 'q4_3'): 2.1,
            ('q4_3', 'q4_4'): 2.1,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 78)

    def test_tsp(self):
        #量子ビットを用意する
        q00 = symbols('q00')
        q01 = symbols('q01')
        q02 = symbols('q02')
        q03 = symbols('q03')
        q04 = symbols('q04')
        q05 = symbols('q05')
        q06 = symbols('q06')
        q07 = symbols('q07')
        q08 = symbols('q08')
        q09 = symbols('q09')
        q10 = symbols('q10')
        q11 = symbols('q11')
        q12 = symbols('q12')
        q13 = symbols('q13')
        q14 = symbols('q14')
        q15 = symbols('q15')

        #1番目に訪れる都市は1つだけにしたい
        H = 0
        H += (q00 + q01 + q02 + q03 - 1)**2
        H += (q04 + q05 + q06 + q07 - 1)**2
        H += (q08 + q09 + q10 + q11 - 1)**2
        H += (q12 + q13 + q14 + q15 - 1)**2

        #都市Aに訪れる順番は1つだけにしたい
        H += (q00 + q04 + q08 + q12 - 1)**2
        H += (q01 + q05 + q09 + q13 - 1)**2
        H += (q02 + q06 + q10 + q14 - 1)**2
        H += (q03 + q07 + q11 + q15 - 1)**2

        #都市間の距離に比例したペナルティ
        #1番目から2番目への移動について
        H += 0.0 * (q00 * q04) #距離0なので
        H += 0.3 * (q01 * q04) #距離3なので
        H += 0.2 * (q02 * q04) #距離2なので
        H += 0.6 * (q03 * q04) #距離6なので

        H += 0.3 * (q00 * q05)
        H += 0.0 * (q01 * q05)
        H += 0.1 * (q02 * q05)
        H += 0.2 * (q03 * q05)

        H += 0.2 * (q00 * q06)
        H += 0.1 * (q01 * q06)
        H += 0.0 * (q02 * q06)
        H += 0.3 * (q03 * q06)

        H += 0.6 * (q00 * q07)
        H += 0.2 * (q01 * q07)
        H += 0.3 * (q02 * q07)
        H += 0.0 * (q03 * q07)

        #2番目から3番目への移動について
        H += 0.0 * (q04 * q08)
        H += 0.3 * (q05 * q08)
        H += 0.2 * (q06 * q08)
        H += 0.6 * (q07 * q08)

        H += 0.3 * (q04 * q09)
        H += 0.0 * (q05 * q09)
        H += 0.1 * (q06 * q09)
        H += 0.2 * (q07 * q09)

        H += 0.2 * (q04 * q10)
        H += 0.1 * (q05 * q10)
        H += 0.0 * (q06 * q10)
        H += 0.3 * (q07 * q10)

        H += 0.6 * (q04 * q11)
        H += 0.2 * (q05 * q11)
        H += 0.3 * (q06 * q11)
        H += 0.0 * (q07 * q11)

        #3番目から4番目への移動について
        H += 0.0 * (q08 * q12)
        H += 0.3 * (q09 * q12)
        H += 0.2 * (q10 * q12)
        H += 0.6 * (q11 * q12)

        H += 0.3 * (q08 * q13)
        H += 0.0 * (q09 * q13)
        H += 0.1 * (q10 * q13)
        H += 0.2 * (q11 * q13)

        H += 0.2 * (q08 * q14)
        H += 0.1 * (q09 * q14)
        H += 0.0 * (q10 * q14)
        H += 0.3 * (q11 * q14)

        H += 0.6 * (q08 * q15)
        H += 0.2 * (q09 * q15)
        H += 0.3 * (q10 * q15)
        H += 0.0 * (q11 * q15)


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q00', 'q00'): -2.0,
            ('q01', 'q01'): -2.0,
            ('q02', 'q02'): -2.0,
            ('q03', 'q03'): -2.0,
            ('q04', 'q04'): -2.0,
            ('q05', 'q05'): -2.0,
            ('q06', 'q06'): -2.0,
            ('q07', 'q07'): -2.0,
            ('q08', 'q08'): -2.0,
            ('q09', 'q09'): -2.0,
            ('q10', 'q10'): -2.0,
            ('q11', 'q11'): -2.0,
            ('q12', 'q12'): -2.0,
            ('q13', 'q13'): -2.0,
            ('q14', 'q14'): -2.0,
            ('q15', 'q15'): -2.0,
            ('q00', 'q01'): 2.0,
            ('q00', 'q02'): 2.0,
            ('q00', 'q03'): 2.0,
            ('q00', 'q04'): 2.0,
            ('q00', 'q08'): 2.0,
            ('q00', 'q12'): 2.0,
            ('q01', 'q02'): 2.0,
            ('q01', 'q03'): 2.0,
            ('q01', 'q05'): 2.0,
            ('q01', 'q09'): 2.0,
            ('q01', 'q13'): 2.0,
            ('q02', 'q03'): 2.0,
            ('q02', 'q06'): 2.0,
            ('q02', 'q10'): 2.0,
            ('q02', 'q14'): 2.0,
            ('q03', 'q07'): 2.0,
            ('q03', 'q11'): 2.0,
            ('q03', 'q15'): 2.0,
            ('q04', 'q05'): 2.0,
            ('q04', 'q06'): 2.0,
            ('q04', 'q07'): 2.0,
            ('q04', 'q08'): 2.0,
            ('q04', 'q12'): 2.0,
            ('q05', 'q06'): 2.0,
            ('q05', 'q07'): 2.0,
            ('q05', 'q09'): 2.0,
            ('q05', 'q13'): 2.0,
            ('q06', 'q07'): 2.0,
            ('q06', 'q10'): 2.0,
            ('q06', 'q14'): 2.0,
            ('q07', 'q11'): 2.0,
            ('q07', 'q15'): 2.0,
            ('q08', 'q09'): 2.0,
            ('q08', 'q10'): 2.0,
            ('q08', 'q11'): 2.0,
            ('q08', 'q12'): 2.0,
            ('q09', 'q10'): 2.0,
            ('q09', 'q11'): 2.0,
            ('q09', 'q13'): 2.0,
            ('q10', 'q11'): 2.0,
            ('q10', 'q14'): 2.0,
            ('q11', 'q15'): 2.0,
            ('q12', 'q13'): 2.0,
            ('q12', 'q14'): 2.0,
            ('q12', 'q15'): 2.0,
            ('q13', 'q14'): 2.0,
            ('q13', 'q15'): 2.0,
            ('q14', 'q15'): 2.0,
            ('q01', 'q06'): 0.1,
            ('q02', 'q05'): 0.1,
            ('q05', 'q10'): 0.1,
            ('q06', 'q09'): 0.1,
            ('q09', 'q14'): 0.1,
            ('q10', 'q13'): 0.1,
            ('q00', 'q06'): 0.2,
            ('q01', 'q07'): 0.2,
            ('q02', 'q04'): 0.2,
            ('q03', 'q05'): 0.2,
            ('q04', 'q10'): 0.2,
            ('q05', 'q11'): 0.2,
            ('q06', 'q08'): 0.2,
            ('q07', 'q09'): 0.2,
            ('q08', 'q14'): 0.2,
            ('q09', 'q15'): 0.2,
            ('q10', 'q12'): 0.2,
            ('q11', 'q13'): 0.2,
            ('q00', 'q05'): 0.3,
            ('q01', 'q04'): 0.3,
            ('q02', 'q07'): 0.3,
            ('q03', 'q06'): 0.3,
            ('q04', 'q09'): 0.3,
            ('q05', 'q08'): 0.3,
            ('q06', 'q11'): 0.3,
            ('q07', 'q10'): 0.3,
            ('q08', 'q13'): 0.3,
            ('q09', 'q12'): 0.3,
            ('q10', 'q15'): 0.3,
            ('q11', 'q14'): 0.3,
            ('q00', 'q07'): 0.6,
            ('q03', 'q04'): 0.6,
            ('q04', 'q11'): 0.6,
            ('q07', 'q08'): 0.6,
            ('q08', 'q15'): 0.6,
            ('q11', 'q12'): 0.6,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 8)

    def test_clustering(self):
        #データ
        x = np.array([0.45, 0.80, 0.71, 0.49, 0.79, 0.30, 0.44, 0.14, 0.30, 0.40])
        y = np.array([0.14, 0.14, 0.17, 0.25, 0.32, 0.63, 0.68, 0.74, 0.77, 0.84])

        #量子ビットを用意する、例：q0_1は点0のクラス1担当
        q0_1, q0_2, q0_3 = symbols('q0_1 q0_2 q0_3')
        q1_1, q1_2, q1_3 = symbols('q1_1 q1_2 q1_3')
        q2_1, q2_2, q2_3 = symbols('q2_1 q2_2 q2_3')
        q3_1, q3_2, q3_3 = symbols('q3_1 q3_2 q3_3')
        q4_1, q4_2, q4_3 = symbols('q4_1 q4_2 q4_3')
        q5_1, q5_2, q5_3 = symbols('q5_1 q5_2 q5_3')
        q6_1, q6_2, q6_3 = symbols('q6_1 q6_2 q6_3')
        q7_1, q7_2, q7_3 = symbols('q7_1 q7_2 q7_3')
        q8_1, q8_2, q8_3 = symbols('q8_1 q8_2 q8_3')
        q9_1, q9_2, q9_3 = symbols('q9_1 q9_2 q9_3')

        #制約条件：各点ともワンホットで一つだけ１になる
        H = 0
        H += (q0_1 + q0_2 + q0_3 - 1)**2
        H += (q1_1 + q1_2 + q1_3 - 1)**2
        H += (q2_1 + q2_2 + q2_3 - 1)**2
        H += (q3_1 + q3_2 + q3_3 - 1)**2
        H += (q4_1 + q4_2 + q4_3 - 1)**2
        H += (q5_1 + q5_2 + q5_3 - 1)**2
        H += (q6_1 + q6_2 + q6_3 - 1)**2
        H += (q7_1 + q7_2 + q7_3 - 1)**2
        H += (q8_1 + q8_2 + q8_3 - 1)**2
        H += (q9_1 + q9_2 + q9_3 - 1)**2

        #コスト：2点の組み合わせで
        for i in range(9):
            for j in range(i+1, 10):
                #2点の距離
                dist = ((x[i] - x[j])**2 + (y[i] - y[j])**2)**0.5

                #同時にクラス1に入った場合のペナルティ
                text = f'H += 0.1 * {dist} * (q{i}_1 * q{j}_1)'
                exec(text)

                #同時にクラス2に入った場合のペナルティ
                text = f'H += 0.1 * {dist} * (q{i}_2 * q{j}_2)'
                exec(text)

                #同時にクラス3に入った場合のペナルティ
                text = f'H += 0.1 * {dist} * (q{i}_3 * q{j}_3)'
                exec(text)

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q0_1', 'q0_1'): -1.0,
            ('q0_2', 'q0_2'): -1.0,
            ('q0_3', 'q0_3'): -1.0,
            ('q1_1', 'q1_1'): -1.0,
            ('q1_2', 'q1_2'): -1.0,
            ('q1_3', 'q1_3'): -1.0,
            ('q2_1', 'q2_1'): -1.0,
            ('q2_2', 'q2_2'): -1.0,
            ('q2_3', 'q2_3'): -1.0,
            ('q3_1', 'q3_1'): -1.0,
            ('q3_2', 'q3_2'): -1.0,
            ('q3_3', 'q3_3'): -1.0,
            ('q4_1', 'q4_1'): -1.0,
            ('q4_2', 'q4_2'): -1.0,
            ('q4_3', 'q4_3'): -1.0,
            ('q5_1', 'q5_1'): -1.0,
            ('q5_2', 'q5_2'): -1.0,
            ('q5_3', 'q5_3'): -1.0,
            ('q6_1', 'q6_1'): -1.0,
            ('q6_2', 'q6_2'): -1.0,
            ('q6_3', 'q6_3'): -1.0,
            ('q7_1', 'q7_1'): -1.0,
            ('q7_2', 'q7_2'): -1.0,
            ('q7_3', 'q7_3'): -1.0,
            ('q8_1', 'q8_1'): -1.0,
            ('q8_2', 'q8_2'): -1.0,
            ('q8_3', 'q8_3'): -1.0,
            ('q9_1', 'q9_1'): -1.0,
            ('q9_2', 'q9_2'): -1.0,
            ('q9_3', 'q9_3'): -1.0,
            ('q0_1', 'q0_2'): 2.0,
            ('q0_1', 'q0_3'): 2.0,
            ('q0_2', 'q0_3'): 2.0,
            ('q1_1', 'q1_2'): 2.0,
            ('q1_1', 'q1_3'): 2.0,
            ('q1_2', 'q1_3'): 2.0,
            ('q2_1', 'q2_2'): 2.0,
            ('q2_1', 'q2_3'): 2.0,
            ('q2_2', 'q2_3'): 2.0,
            ('q3_1', 'q3_2'): 2.0,
            ('q3_1', 'q3_3'): 2.0,
            ('q3_2', 'q3_3'): 2.0,
            ('q4_1', 'q4_2'): 2.0,
            ('q4_1', 'q4_3'): 2.0,
            ('q4_2', 'q4_3'): 2.0,
            ('q5_1', 'q5_2'): 2.0,
            ('q5_1', 'q5_3'): 2.0,
            ('q5_2', 'q5_3'): 2.0,
            ('q6_1', 'q6_2'): 2.0,
            ('q6_1', 'q6_3'): 2.0,
            ('q6_2', 'q6_3'): 2.0,
            ('q7_1', 'q7_2'): 2.0,
            ('q7_1', 'q7_3'): 2.0,
            ('q7_2', 'q7_3'): 2.0,
            ('q8_1', 'q8_2'): 2.0,
            ('q8_1', 'q8_3'): 2.0,
            ('q8_2', 'q8_3'): 2.0,
            ('q9_1', 'q9_2'): 2.0,
            ('q9_1', 'q9_3'): 2.0,
            ('q9_2', 'q9_3'): 2.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 10)

    def test_simultaneous_equations1(self):
        #量子ビットを用意する
        x = symbols('x')
        y = symbols('y')
        z = symbols('z')

        #連立方程式の設定
        H = 0
        H += ( 5*x -  y +2*z - 7)**2
        H += (-3*x +4*y +  z + 2)**2
        H += (   x -2*y -4*z + 3)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('x', 'x'): -41.0,
            ('z', 'z'): -27.0,
            ('y', 'y'): 39.0,
            ('x', 'y'): -38.0,
            ('x', 'z'): 6.0,
            ('y', 'z'): 20.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 62)

    def test_simultaneous_equations2(self):
        #量子ビットを用意する
        x0, x1 = symbols('x0 x1')
        y0, y1 = symbols('y0 y1')
        z0, z1 = symbols('z0 z1')

        #x,y,zを2進数（2bit）で表す
        x = 2*x0 + 1*x1
        y = 2*y0 + 1*y1
        z = 2*z0 + 1*z1

        #連立方程式の設定
        H = 0
        H += (  x +  y +  z -  6)**2
        H += (2*x +3*y -2*z - 11)**2
        H += (3*x -  y +  z -  4)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('x0', 'x0'): -104.0,
            ('y0', 'y0'): -96.0,
            ('x1', 'x1'): -66.0,
            ('y1', 'y1'): -59.0,
            ('z1', 'z1'): 30.0,
            ('z0', 'z0'): 72.0,
            ('y0', 'z0'): -48.0,
            ('y0', 'z1'): -24.0,
            ('y1', 'z0'): -24.0,
            ('y1', 'z1'): -12.0,
            ('x1', 'y1'): 8.0,
            ('x0', 'y1'): 16.0,
            ('x1', 'y0'): 16.0,
            ('z0', 'z1'): 24.0,
            ('x0', 'y0'): 32.0,
            ('y0', 'y1'): 44.0,
            ('x0', 'x1'): 56.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 173)

    def test_simultaneous_equations3(self):
        #量子ビットを用意する
        x0, x1, x2, x3, x4, x5, x6, x7 = symbols('x0 x1 x2 x3 x4 x5 x6 x7')
        y0, y1, y2, y3, y4, y5, y6, y7 = symbols('y0 y1 y2 y3 y4 y5 y6 y7')
        z0, z1, z2, z3, z4, z5, z6, z7 = symbols('z0 z1 z2 z3 z4 z5 z6 z7')

        #x,y,zを2進数（8bit）で表す
        x = 128*x0 + 64*x1 + 32*x2 + 16*x3 + 8*x4 + 4*x5 + 2*x6 + 1*x7
        y = 128*y0 + 64*y1 + 32*y2 + 16*y3 + 8*y4 + 4*y5 + 2*y6 + 1*y7
        z = 128*z0 + 64*z1 + 32*z2 + 16*z3 + 8*z4 + 4*z5 + 2*z6 + 1*z7

        #連立方程式の設定
        H = 0
        H += (10*x +14*y +4*z - 5120)**2
        H += ( 9*x +12*y +2*z - 4230)**2
        H += ( 7*x + 5*y +2*z - 2360)**2


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('y0', 'y0'): -28385280.0,
            ('x0', 'x0'): -23313920.0,
            ('y1', 'y1'): -15687680.0,
            ('x1', 'x1'): -12599040.0,
            ('z0', 'z0'): -8223744.0,
            ('y2', 'y2'): -8217600.0,
            ('x2', 'x2'): -6535040.0,
            ('z1', 'z1'): -4210176.0,
            ('y3', 'y3'): -4202240.0,
            ('x3', 'x3'): -3326400.0,
            ('z2', 'z2'): -2129664.0,
            ('y4', 'y4'): -2124480.0,
            ('x4', 'x4'): -1677920.0,
            ('z3', 'z3'): -1070976.0,
            ('y5', 'y5'): -1068080.0,
            ('x5', 'x5'): -842640.0,
            ('z4', 'z4'): -537024.0,
            ('y6', 'y6'): -535500.0,
            ('x6', 'x6'): -422240.0,
            ('z5', 'z5'): -268896.0,
            ('y7', 'y7'): -268115.0,
            ('x7', 'x7'): -211350.0,
            ('z6', 'z6'): -134544.0,
            ('z7', 'z7'): -67296.0,
            ('z6', 'z7'): 96.0,
            ('x7', 'z7'): 144.0,
            ('y7', 'z7'): 180.0,
            ('z5', 'z7'): 192.0,
            ('x6', 'z7'): 288.0,
            ('x7', 'z6'): 288.0,
            ('y6', 'z7'): 360.0,
            ('y7', 'z6'): 360.0,
            ('z4', 'z7'): 384.0,
            ('z5', 'z6'): 384.0,
            ('x7', 'y7'): 566.0,
            ('x5', 'z7'): 576.0,
            ('x6', 'z6'): 576.0,
            ('x7', 'z5'): 576.0,
            ('y5', 'z7'): 720.0,
            ('y6', 'z6'): 720.0,
            ('y7', 'z5'): 720.0,
            ('z3', 'z7'): 768.0,
            ('z4', 'z6'): 768.0,
            ('x6', 'x7'): 920.0,
            ('x6', 'y7'): 1132.0,
            ('x7', 'y6'): 1132.0,
            ('x4', 'z7'): 1152.0,
            ('x5', 'z6'): 1152.0,
            ('x6', 'z5'): 1152.0,
            ('x7', 'z4'): 1152.0,
            ('y4', 'z7'): 1440.0,
            ('y5', 'z6'): 1440.0,
            ('y6', 'z5'): 1440.0,
            ('y7', 'z4'): 1440.0,
            ('y6', 'y7'): 1460.0,
            ('z2', 'z7'): 1536.0,
            ('z3', 'z6'): 1536.0,
            ('z4', 'z5'): 1536.0,
            ('x5', 'x7'): 1840.0,
            ('x5', 'y7'): 2264.0,
            ('x6', 'y6'): 2264.0,
            ('x7', 'y5'): 2264.0,
            ('x3', 'z7'): 2304.0,
            ('x4', 'z6'): 2304.0,
            ('x5', 'z5'): 2304.0,
            ('x6', 'z4'): 2304.0,
            ('x7', 'z3'): 2304.0,
            ('y3', 'z7'): 2880.0,
            ('y4', 'z6'): 2880.0,
            ('y5', 'z5'): 2880.0,
            ('y6', 'z4'): 2880.0,
            ('y7', 'z3'): 2880.0,
            ('y5', 'y7'): 2920.0,
            ('z1', 'z7'): 3072.0,
            ('z2', 'z6'): 3072.0,
            ('z3', 'z5'): 3072.0,
            ('x4', 'x7'): 3680.0,
            ('x5', 'x6'): 3680.0,
            ('x4', 'y7'): 4528.0,
            ('x5', 'y6'): 4528.0,
            ('x6', 'y5'): 4528.0,
            ('x7', 'y4'): 4528.0,
            ('x2', 'z7'): 4608.0,
            ('x3', 'z6'): 4608.0,
            ('x4', 'z5'): 4608.0,
            ('x5', 'z4'): 4608.0,
            ('x6', 'z3'): 4608.0,
            ('x7', 'z2'): 4608.0,
            ('y2', 'z7'): 5760.0,
            ('y3', 'z6'): 5760.0,
            ('y4', 'z5'): 5760.0,
            ('y5', 'z4'): 5760.0,
            ('y6', 'z3'): 5760.0,
            ('y7', 'z2'): 5760.0,
            ('y4', 'y7'): 5840.0,
            ('y5', 'y6'): 5840.0,
            ('z0', 'z7'): 6144.0,
            ('z1', 'z6'): 6144.0,
            ('z2', 'z5'): 6144.0,
            ('z3', 'z4'): 6144.0,
            ('x3', 'x7'): 7360.0,
            ('x4', 'x6'): 7360.0,
            ('x3', 'y7'): 9056.0,
            ('x4', 'y6'): 9056.0,
            ('x5', 'y5'): 9056.0,
            ('x6', 'y4'): 9056.0,
            ('x7', 'y3'): 9056.0,
            ('x1', 'z7'): 9216.0,
            ('x2', 'z6'): 9216.0,
            ('x3', 'z5'): 9216.0,
            ('x4', 'z4'): 9216.0,
            ('x5', 'z3'): 9216.0,
            ('x6', 'z2'): 9216.0,
            ('x7', 'z1'): 9216.0,
            ('y1', 'z7'): 11520.0,
            ('y2', 'z6'): 11520.0,
            ('y3', 'z5'): 11520.0,
            ('y4', 'z4'): 11520.0,
            ('y5', 'z3'): 11520.0,
            ('y6', 'z2'): 11520.0,
            ('y7', 'z1'): 11520.0,
            ('y3', 'y7'): 11680.0,
            ('y4', 'y6'): 11680.0,
            ('z0', 'z6'): 12288.0,
            ('z1', 'z5'): 12288.0,
            ('z2', 'z4'): 12288.0,
            ('x2', 'x7'): 14720.0,
            ('x3', 'x6'): 14720.0,
            ('x4', 'x5'): 14720.0,
            ('x2', 'y7'): 18112.0,
            ('x3', 'y6'): 18112.0,
            ('x4', 'y5'): 18112.0,
            ('x5', 'y4'): 18112.0,
            ('x6', 'y3'): 18112.0,
            ('x7', 'y2'): 18112.0,
            ('x0', 'z7'): 18432.0,
            ('x1', 'z6'): 18432.0,
            ('x2', 'z5'): 18432.0,
            ('x3', 'z4'): 18432.0,
            ('x4', 'z3'): 18432.0,
            ('x5', 'z2'): 18432.0,
            ('x6', 'z1'): 18432.0,
            ('x7', 'z0'): 18432.0,
            ('y0', 'z7'): 23040.0,
            ('y1', 'z6'): 23040.0,
            ('y2', 'z5'): 23040.0,
            ('y3', 'z4'): 23040.0,
            ('y4', 'z3'): 23040.0,
            ('y5', 'z2'): 23040.0,
            ('y6', 'z1'): 23040.0,
            ('y7', 'z0'): 23040.0,
            ('y2', 'y7'): 23360.0,
            ('y3', 'y6'): 23360.0,
            ('y4', 'y5'): 23360.0,
            ('z0', 'z5'): 24576.0,
            ('z1', 'z4'): 24576.0,
            ('z2', 'z3'): 24576.0,
            ('x1', 'x7'): 29440.0,
            ('x2', 'x6'): 29440.0,
            ('x3', 'x5'): 29440.0,
            ('x1', 'y7'): 36224.0,
            ('x2', 'y6'): 36224.0,
            ('x3', 'y5'): 36224.0,
            ('x4', 'y4'): 36224.0,
            ('x5', 'y3'): 36224.0,
            ('x6', 'y2'): 36224.0,
            ('x7', 'y1'): 36224.0,
            ('x0', 'z6'): 36864.0,
            ('x1', 'z5'): 36864.0,
            ('x2', 'z4'): 36864.0,
            ('x3', 'z3'): 36864.0,
            ('x4', 'z2'): 36864.0,
            ('x5', 'z1'): 36864.0,
            ('x6', 'z0'): 36864.0,
            ('y0', 'z6'): 46080.0,
            ('y1', 'z5'): 46080.0,
            ('y2', 'z4'): 46080.0,
            ('y3', 'z3'): 46080.0,
            ('y4', 'z2'): 46080.0,
            ('y5', 'z1'): 46080.0,
            ('y6', 'z0'): 46080.0,
            ('y1', 'y7'): 46720.0,
            ('y2', 'y6'): 46720.0,
            ('y3', 'y5'): 46720.0,
            ('z0', 'z4'): 49152.0,
            ('z1', 'z3'): 49152.0,
            ('x0', 'x7'): 58880.0,
            ('x1', 'x6'): 58880.0,
            ('x2', 'x5'): 58880.0,
            ('x3', 'x4'): 58880.0,
            ('x0', 'y7'): 72448.0,
            ('x1', 'y6'): 72448.0,
            ('x2', 'y5'): 72448.0,
            ('x3', 'y4'): 72448.0,
            ('x4', 'y3'): 72448.0,
            ('x5', 'y2'): 72448.0,
            ('x6', 'y1'): 72448.0,
            ('x7', 'y0'): 72448.0,
            ('x0', 'z5'): 73728.0,
            ('x1', 'z4'): 73728.0,
            ('x2', 'z3'): 73728.0,
            ('x3', 'z2'): 73728.0,
            ('x4', 'z1'): 73728.0,
            ('x5', 'z0'): 73728.0,
            ('y0', 'z5'): 92160.0,
            ('y1', 'z4'): 92160.0,
            ('y2', 'z3'): 92160.0,
            ('y3', 'z2'): 92160.0,
            ('y4', 'z1'): 92160.0,
            ('y5', 'z0'): 92160.0,
            ('y0', 'y7'): 93440.0,
            ('y1', 'y6'): 93440.0,
            ('y2', 'y5'): 93440.0,
            ('y3', 'y4'): 93440.0,
            ('z0', 'z3'): 98304.0,
            ('z1', 'z2'): 98304.0,
            ('x0', 'x6'): 117760.0,
            ('x1', 'x5'): 117760.0,
            ('x2', 'x4'): 117760.0,
            ('x0', 'y6'): 144896.0,
            ('x1', 'y5'): 144896.0,
            ('x2', 'y4'): 144896.0,
            ('x3', 'y3'): 144896.0,
            ('x4', 'y2'): 144896.0,
            ('x5', 'y1'): 144896.0,
            ('x6', 'y0'): 144896.0,
            ('x0', 'z4'): 147456.0,
            ('x1', 'z3'): 147456.0,
            ('x2', 'z2'): 147456.0,
            ('x3', 'z1'): 147456.0,
            ('x4', 'z0'): 147456.0,
            ('y0', 'z4'): 184320.0,
            ('y1', 'z3'): 184320.0,
            ('y2', 'z2'): 184320.0,
            ('y3', 'z1'): 184320.0,
            ('y4', 'z0'): 184320.0,
            ('y0', 'y6'): 186880.0,
            ('y1', 'y5'): 186880.0,
            ('y2', 'y4'): 186880.0,
            ('z0', 'z2'): 196608.0,
            ('x0', 'x5'): 235520.0,
            ('x1', 'x4'): 235520.0,
            ('x2', 'x3'): 235520.0,
            ('x0', 'y5'): 289792.0,
            ('x1', 'y4'): 289792.0,
            ('x2', 'y3'): 289792.0,
            ('x3', 'y2'): 289792.0,
            ('x4', 'y1'): 289792.0,
            ('x5', 'y0'): 289792.0,
            ('x0', 'z3'): 294912.0,
            ('x1', 'z2'): 294912.0,
            ('x2', 'z1'): 294912.0,
            ('x3', 'z0'): 294912.0,
            ('y0', 'z3'): 368640.0,
            ('y1', 'z2'): 368640.0,
            ('y2', 'z1'): 368640.0,
            ('y3', 'z0'): 368640.0,
            ('y0', 'y5'): 373760.0,
            ('y1', 'y4'): 373760.0,
            ('y2', 'y3'): 373760.0,
            ('z0', 'z1'): 393216.0,
            ('x0', 'x4'): 471040.0,
            ('x1', 'x3'): 471040.0,
            ('x0', 'y4'): 579584.0,
            ('x1', 'y3'): 579584.0,
            ('x2', 'y2'): 579584.0,
            ('x3', 'y1'): 579584.0,
            ('x4', 'y0'): 579584.0,
            ('x0', 'z2'): 589824.0,
            ('x1', 'z1'): 589824.0,
            ('x2', 'z0'): 589824.0,
            ('y0', 'z2'): 737280.0,
            ('y1', 'z1'): 737280.0,
            ('y2', 'z0'): 737280.0,
            ('y0', 'y4'): 747520.0,
            ('y1', 'y3'): 747520.0,
            ('x0', 'x3'): 942080.0,
            ('x1', 'x2'): 942080.0,
            ('x0', 'y3'): 1159168.0,
            ('x1', 'y2'): 1159168.0,
            ('x2', 'y1'): 1159168.0,
            ('x3', 'y0'): 1159168.0,
            ('x0', 'z1'): 1179648.0,
            ('x1', 'z0'): 1179648.0,
            ('y0', 'z1'): 1474560.0,
            ('y1', 'z0'): 1474560.0,
            ('y0', 'y3'): 1495040.0,
            ('y1', 'y2'): 1495040.0,
            ('x0', 'x2'): 1884160.0,
            ('x0', 'y2'): 2318336.0,
            ('x1', 'y1'): 2318336.0,
            ('x2', 'y0'): 2318336.0,
            ('x0', 'z0'): 2359296.0,
            ('y0', 'z0'): 2949120.0,
            ('y0', 'y2'): 2990080.0,
            ('x0', 'x1'): 3768320.0,
            ('x0', 'y1'): 4636672.0,
            ('x1', 'y0'): 4636672.0,
            ('y0', 'y1'): 5980160.0,
            ('x0', 'y0'): 9273344.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 49676900)

    def test_simultaneous_equations4(self):
        #量子ビットをNビット表現で用意する
        x = symbols_nbit(0, 256, 'x{}', num=8)
        y = symbols_nbit(0, 256, 'y{}', num=8)
        z = symbols_nbit(0, 256, 'z{}', num=8)

        #連立方程式の設定
        H = 0
        H += (10*x +14*y +4*z - 5120)**2
        H += ( 9*x +12*y +2*z - 4230)**2
        H += ( 7*x + 5*y +2*z - 2360)**2

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('y1', 'y1'): -15687680.0,
            ('z7', 'z7'): -67296.0,
            ('y0', 'y0'): -28385280.0,
            ('y2', 'y2'): -8217600.0,
            ('z0', 'z0'): -8223744.0,
            ('z1', 'z1'): -4210176.0,
            ('z2', 'z2'): -2129664.0,
            ('z3', 'z3'): -1070976.0,
            ('z4', 'z4'): -537024.0,
            ('z5', 'z5'): -268896.0,
            ('z6', 'z6'): -134544.0,
            ('x6', 'x6'): -422240.0,
            ('y3', 'y3'): -4202240.0,
            ('y4', 'y4'): -2124480.0,
            ('x0', 'x0'): -23313920.0,
            ('x1', 'x1'): -12599040.0,
            ('x2', 'x2'): -6535040.0,
            ('x3', 'x3'): -3326400.0,
            ('x4', 'x4'): -1677920.0,
            ('x5', 'x5'): -842640.0,
            ('y5', 'y5'): -1068080.0,
            ('x7', 'x7'): -211350.0,
            ('y6', 'y6'): -535500.0,
            ('y7', 'y7'): -268115.0,
            ('x7', 'z7'): 144.0,
            ('x6', 'z7'): 288.0,
            ('x7', 'z6'): 288.0,
            ('x5', 'z7'): 576.0,
            ('x6', 'z6'): 576.0,
            ('x7', 'z5'): 576.0,
            ('x4', 'z7'): 1152.0,
            ('x5', 'z6'): 1152.0,
            ('x6', 'z5'): 1152.0,
            ('x7', 'z4'): 1152.0,
            ('x3', 'z7'): 2304.0,
            ('x4', 'z6'): 2304.0,
            ('x5', 'z5'): 2304.0,
            ('x6', 'z4'): 2304.0,
            ('x7', 'z3'): 2304.0,
            ('x2', 'z7'): 4608.0,
            ('x3', 'z6'): 4608.0,
            ('x4', 'z5'): 4608.0,
            ('x5', 'z4'): 4608.0,
            ('x6', 'z3'): 4608.0,
            ('x7', 'z2'): 4608.0,
            ('x1', 'z7'): 9216.0,
            ('x2', 'z6'): 9216.0,
            ('x3', 'z5'): 9216.0,
            ('x4', 'z4'): 9216.0,
            ('x5', 'z3'): 9216.0,
            ('x6', 'z2'): 9216.0,
            ('x7', 'z1'): 9216.0,
            ('x0', 'z7'): 18432.0,
            ('x1', 'z6'): 18432.0,
            ('x2', 'z5'): 18432.0,
            ('x3', 'z4'): 18432.0,
            ('x4', 'z3'): 18432.0,
            ('x5', 'z2'): 18432.0,
            ('x6', 'z1'): 18432.0,
            ('x7', 'z0'): 18432.0,
            ('x0', 'z6'): 36864.0,
            ('x1', 'z5'): 36864.0,
            ('x2', 'z4'): 36864.0,
            ('x3', 'z3'): 36864.0,
            ('x4', 'z2'): 36864.0,
            ('x5', 'z1'): 36864.0,
            ('x6', 'z0'): 36864.0,
            ('x0', 'z5'): 73728.0,
            ('x1', 'z4'): 73728.0,
            ('x2', 'z3'): 73728.0,
            ('x3', 'z2'): 73728.0,
            ('x4', 'z1'): 73728.0,
            ('x5', 'z0'): 73728.0,
            ('x0', 'z4'): 147456.0,
            ('x1', 'z3'): 147456.0,
            ('x2', 'z2'): 147456.0,
            ('x3', 'z1'): 147456.0,
            ('x4', 'z0'): 147456.0,
            ('x0', 'z3'): 294912.0,
            ('x1', 'z2'): 294912.0,
            ('x2', 'z1'): 294912.0,
            ('x3', 'z0'): 294912.0,
            ('x0', 'z2'): 589824.0,
            ('x1', 'z1'): 589824.0,
            ('x2', 'z0'): 589824.0,
            ('x0', 'z1'): 1179648.0,
            ('x1', 'z0'): 1179648.0,
            ('x0', 'z0'): 2359296.0,
            ('y7', 'z7'): 180.0,
            ('y6', 'z7'): 360.0,
            ('y7', 'z6'): 360.0,
            ('y5', 'z7'): 720.0,
            ('y6', 'z6'): 720.0,
            ('y7', 'z5'): 720.0,
            ('y4', 'z7'): 1440.0,
            ('y5', 'z6'): 1440.0,
            ('y6', 'z5'): 1440.0,
            ('y7', 'z4'): 1440.0,
            ('y3', 'z7'): 2880.0,
            ('y4', 'z6'): 2880.0,
            ('y5', 'z5'): 2880.0,
            ('y6', 'z4'): 2880.0,
            ('y7', 'z3'): 2880.0,
            ('y2', 'z7'): 5760.0,
            ('y3', 'z6'): 5760.0,
            ('y4', 'z5'): 5760.0,
            ('y5', 'z4'): 5760.0,
            ('y6', 'z3'): 5760.0,
            ('y7', 'z2'): 5760.0,
            ('y1', 'z7'): 11520.0,
            ('y2', 'z6'): 11520.0,
            ('y3', 'z5'): 11520.0,
            ('y4', 'z4'): 11520.0,
            ('y5', 'z3'): 11520.0,
            ('y6', 'z2'): 11520.0,
            ('y7', 'z1'): 11520.0,
            ('y0', 'z7'): 23040.0,
            ('y1', 'z6'): 23040.0,
            ('y2', 'z5'): 23040.0,
            ('y3', 'z4'): 23040.0,
            ('y4', 'z3'): 23040.0,
            ('y5', 'z2'): 23040.0,
            ('y6', 'z1'): 23040.0,
            ('y7', 'z0'): 23040.0,
            ('y0', 'z6'): 46080.0,
            ('y1', 'z5'): 46080.0,
            ('y2', 'z4'): 46080.0,
            ('y3', 'z3'): 46080.0,
            ('y4', 'z2'): 46080.0,
            ('y5', 'z1'): 46080.0,
            ('y6', 'z0'): 46080.0,
            ('y0', 'z5'): 92160.0,
            ('y1', 'z4'): 92160.0,
            ('y2', 'z3'): 92160.0,
            ('y3', 'z2'): 92160.0,
            ('y4', 'z1'): 92160.0,
            ('y5', 'z0'): 92160.0,
            ('y0', 'z4'): 184320.0,
            ('y1', 'z3'): 184320.0,
            ('y2', 'z2'): 184320.0,
            ('y3', 'z1'): 184320.0,
            ('y4', 'z0'): 184320.0,
            ('y0', 'z3'): 368640.0,
            ('y1', 'z2'): 368640.0,
            ('y2', 'z1'): 368640.0,
            ('y3', 'z0'): 368640.0,
            ('y0', 'z2'): 737280.0,
            ('y1', 'z1'): 737280.0,
            ('y2', 'z0'): 737280.0,
            ('y0', 'z1'): 1474560.0,
            ('y1', 'z0'): 1474560.0,
            ('y0', 'z0'): 2949120.0,
            ('x6', 'x7'): 920.0,
            ('x5', 'x7'): 1840.0,
            ('x4', 'x7'): 3680.0,
            ('x5', 'x6'): 3680.0,
            ('x3', 'x7'): 7360.0,
            ('x4', 'x6'): 7360.0,
            ('x2', 'x7'): 14720.0,
            ('x3', 'x6'): 14720.0,
            ('x4', 'x5'): 14720.0,
            ('x1', 'x7'): 29440.0,
            ('x2', 'x6'): 29440.0,
            ('x3', 'x5'): 29440.0,
            ('x0', 'x7'): 58880.0,
            ('x1', 'x6'): 58880.0,
            ('x2', 'x5'): 58880.0,
            ('x3', 'x4'): 58880.0,
            ('x0', 'x6'): 117760.0,
            ('x1', 'x5'): 117760.0,
            ('x2', 'x4'): 117760.0,
            ('x0', 'x5'): 235520.0,
            ('x1', 'x4'): 235520.0,
            ('x2', 'x3'): 235520.0,
            ('x0', 'x4'): 471040.0,
            ('x1', 'x3'): 471040.0,
            ('x0', 'x3'): 942080.0,
            ('x1', 'x2'): 942080.0,
            ('x0', 'x2'): 1884160.0,
            ('x0', 'x1'): 3768320.0,
            ('x7', 'y7'): 566.0,
            ('x6', 'y7'): 1132.0,
            ('x7', 'y6'): 1132.0,
            ('x5', 'y7'): 2264.0,
            ('x6', 'y6'): 2264.0,
            ('x7', 'y5'): 2264.0,
            ('x4', 'y7'): 4528.0,
            ('x5', 'y6'): 4528.0,
            ('x6', 'y5'): 4528.0,
            ('x7', 'y4'): 4528.0,
            ('x3', 'y7'): 9056.0,
            ('x4', 'y6'): 9056.0,
            ('x5', 'y5'): 9056.0,
            ('x6', 'y4'): 9056.0,
            ('x7', 'y3'): 9056.0,
            ('x2', 'y7'): 18112.0,
            ('x3', 'y6'): 18112.0,
            ('x4', 'y5'): 18112.0,
            ('x5', 'y4'): 18112.0,
            ('x6', 'y3'): 18112.0,
            ('x7', 'y2'): 18112.0,
            ('x1', 'y7'): 36224.0,
            ('x2', 'y6'): 36224.0,
            ('x3', 'y5'): 36224.0,
            ('x4', 'y4'): 36224.0,
            ('x5', 'y3'): 36224.0,
            ('x6', 'y2'): 36224.0,
            ('x7', 'y1'): 36224.0,
            ('x0', 'y7'): 72448.0,
            ('x1', 'y6'): 72448.0,
            ('x2', 'y5'): 72448.0,
            ('x3', 'y4'): 72448.0,
            ('x4', 'y3'): 72448.0,
            ('x5', 'y2'): 72448.0,
            ('x6', 'y1'): 72448.0,
            ('x7', 'y0'): 72448.0,
            ('x0', 'y6'): 144896.0,
            ('x1', 'y5'): 144896.0,
            ('x2', 'y4'): 144896.0,
            ('x3', 'y3'): 144896.0,
            ('x4', 'y2'): 144896.0,
            ('x5', 'y1'): 144896.0,
            ('x6', 'y0'): 144896.0,
            ('x0', 'y5'): 289792.0,
            ('x1', 'y4'): 289792.0,
            ('x2', 'y3'): 289792.0,
            ('x3', 'y2'): 289792.0,
            ('x4', 'y1'): 289792.0,
            ('x5', 'y0'): 289792.0,
            ('x0', 'y4'): 579584.0,
            ('x1', 'y3'): 579584.0,
            ('x2', 'y2'): 579584.0,
            ('x3', 'y1'): 579584.0,
            ('x4', 'y0'): 579584.0,
            ('x0', 'y3'): 1159168.0,
            ('x1', 'y2'): 1159168.0,
            ('x2', 'y1'): 1159168.0,
            ('x3', 'y0'): 1159168.0,
            ('x0', 'y2'): 2318336.0,
            ('x1', 'y1'): 2318336.0,
            ('x2', 'y0'): 2318336.0,
            ('x0', 'y1'): 4636672.0,
            ('x1', 'y0'): 4636672.0,
            ('x0', 'y0'): 9273344.0,
            ('y6', 'y7'): 1460.0,
            ('y5', 'y7'): 2920.0,
            ('y4', 'y7'): 5840.0,
            ('y5', 'y6'): 5840.0,
            ('y3', 'y7'): 11680.0,
            ('y4', 'y6'): 11680.0,
            ('y2', 'y7'): 23360.0,
            ('y3', 'y6'): 23360.0,
            ('y4', 'y5'): 23360.0,
            ('y1', 'y7'): 46720.0,
            ('y2', 'y6'): 46720.0,
            ('y3', 'y5'): 46720.0,
            ('y0', 'y7'): 93440.0,
            ('y1', 'y6'): 93440.0,
            ('y2', 'y5'): 93440.0,
            ('y3', 'y4'): 93440.0,
            ('y0', 'y6'): 186880.0,
            ('y1', 'y5'): 186880.0,
            ('y2', 'y4'): 186880.0,
            ('y0', 'y5'): 373760.0,
            ('y1', 'y4'): 373760.0,
            ('y2', 'y3'): 373760.0,
            ('y0', 'y4'): 747520.0,
            ('y1', 'y3'): 747520.0,
            ('y0', 'y3'): 1495040.0,
            ('y1', 'y2'): 1495040.0,
            ('y0', 'y2'): 2990080.0,
            ('y0', 'y1'): 5980160.0,
            ('z6', 'z7'): 96.00000000000001,
            ('z5', 'z7'): 192.00000000000003,
            ('z4', 'z7'): 384.00000000000006,
            ('z5', 'z6'): 384.00000000000006,
            ('z3', 'z7'): 768.0000000000001,
            ('z4', 'z6'): 768.0000000000001,
            ('z2', 'z7'): 1536.0000000000002,
            ('z3', 'z6'): 1536.0000000000002,
            ('z4', 'z5'): 1536.0000000000002,
            ('z1', 'z7'): 3072.0000000000005,
            ('z2', 'z6'): 3072.0000000000005,
            ('z3', 'z5'): 3072.0000000000005,
            ('z0', 'z7'): 6144.000000000001,
            ('z1', 'z6'): 6144.000000000001,
            ('z2', 'z5'): 6144.000000000001,
            ('z3', 'z4'): 6144.000000000001,
            ('z0', 'z6'): 12288.000000000002,
            ('z1', 'z5'): 12288.000000000002,
            ('z2', 'z4'): 12288.000000000002,
            ('z0', 'z5'): 24576.000000000004,
            ('z1', 'z4'): 24576.000000000004,
            ('z2', 'z3'): 24576.000000000004,
            ('z0', 'z4'): 49152.00000000001,
            ('z1', 'z3'): 49152.00000000001,
            ('z0', 'z3'): 98304.00000000001,
            ('z1', 'z2'): 98304.00000000001,
            ('z0', 'z2'): 196608.00000000003,
            ('z0', 'z1'): 393216.00000000006,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 49676900)

    def test_linear_regression1(self):
        #量子ビットを用意する
        a0, a1, a2, a3, a4, a5, a6, a7 = symbols('a0 a1 a2 a3 a4 a5 a6 a7')
        b0, b1, b2, b3, b4, b5, b6, b7 = symbols('b0 b1 b2 b3 b4 b5 b6 b7')

        #aを2進数（8bit）で表す、10～20で規格化
        a = 10 + 10 * ((128*a0 + 64*a1 + 32*a2 + 16*a3 + 8*a4 + 4*a5 + 2*a6 + 1*a7) / 256)
        print(a)
        #bを2進数（8bit）で表す、0～1で規格化
        b = 0 + 1 * ((128*b0 + 64*b1 + 32*b2 + 16*b3 + 8*b4 + 4*b5 + 2*b6 + 1*b7) / 256)

        #各点の誤差二乗をペナルティとする
        H = 0
        H += (5.75 - (a*0.31 + b))**2
        H += (8.56 - (a*0.4 + b))**2
        H += (8.42 - (a*0.47 + b))**2
        H += (7.78 - (a*0.4 + b))**2
        H += (10.25 - (a*0.54 + b))**2
        H += (6.79 - (a*0.36 + b))**2
        H += (11.51 - (a*0.56 + b))**2
        H += (7.66 - (a*0.43 + b))**2
        H += (6.99 - (a*0.32 + b))**2
        H += (10.61 - (a*0.6 + b))**2


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('a5', 'a5'): -5.702736816406251,
            ('a0', 'a0'): -133.58750000000003,
            ('b0', 'b0'): -37.92,
            ('b1', 'b1'): -19.585,
            ('a1', 'a1'): -79.41312500000001,
            ('b2', 'b2'): -9.94875,
            ('b3', 'b3'): -5.0134375,
            ('b4', 'b4'): -2.516484375,
            ('b5', 'b5'): -1.26068359375,
            ('b6', 'b6'): -0.6309521484375,
            ('b7', 'b7'): -0.315628662109375,
            ('a2', 'a2'): -42.86140625000001,
            ('a3', 'a3'): -22.219414062500004,
            ('a4', 'a4'): -11.306884765625002,
            ('a6', 'a6'): -2.8636920166015627,
            ('a7', 'a7'): -1.4349269104003908,
            ('b6', 'b7'): 0.0006103515625,
            ('b5', 'b7'): 0.001220703125,
            ('b4', 'b7'): 0.00244140625,
            ('b5', 'b6'): 0.00244140625,
            ('b3', 'b7'): 0.0048828125,
            ('b4', 'b6'): 0.0048828125,
            ('b2', 'b7'): 0.009765625,
            ('b3', 'b6'): 0.009765625,
            ('b4', 'b5'): 0.009765625,
            ('b1', 'b7'): 0.01953125,
            ('b2', 'b6'): 0.01953125,
            ('b3', 'b5'): 0.01953125,
            ('b0', 'b7'): 0.0390625,
            ('b1', 'b6'): 0.0390625,
            ('b2', 'b5'): 0.0390625,
            ('b3', 'b4'): 0.0390625,
            ('b0', 'b6'): 0.078125,
            ('b1', 'b5'): 0.078125,
            ('b2', 'b4'): 0.078125,
            ('b0', 'b5'): 0.15625,
            ('b1', 'b4'): 0.15625,
            ('b2', 'b3'): 0.15625,
            ('b0', 'b4'): 0.3125,
            ('b1', 'b3'): 0.3125,
            ('b0', 'b3'): 0.625,
            ('b1', 'b2'): 0.625,
            ('b0', 'b2'): 1.25,
            ('b0', 'b1'): 2.5,
            ('a6', 'a7'): 0.012323608398437502,
            ('a5', 'a7'): 0.024647216796875003,
            ('a4', 'a7'): 0.049294433593750006,
            ('a5', 'a6'): 0.049294433593750006,
            ('a3', 'a7'): 0.09858886718750001,
            ('a4', 'a6'): 0.09858886718750001,
            ('a2', 'a7'): 0.19717773437500002,
            ('a3', 'a6'): 0.19717773437500002,
            ('a4', 'a5'): 0.19717773437500002,
            ('a1', 'a7'): 0.39435546875000005,
            ('a2', 'a6'): 0.39435546875000005,
            ('a3', 'a5'): 0.39435546875000005,
            ('a0', 'a7'): 0.7887109375000001,
            ('a1', 'a6'): 0.7887109375000001,
            ('a2', 'a5'): 0.7887109375000001,
            ('a3', 'a4'): 0.7887109375000001,
            ('a0', 'a6'): 1.5774218750000002,
            ('a1', 'a5'): 1.5774218750000002,
            ('a2', 'a4'): 1.5774218750000002,
            ('a0', 'a5'): 3.1548437500000004,
            ('a1', 'a4'): 3.1548437500000004,
            ('a2', 'a3'): 3.1548437500000004,
            ('a0', 'a4'): 6.309687500000001,
            ('a1', 'a3'): 6.309687500000001,
            ('a0', 'a3'): 12.619375000000002,
            ('a1', 'a2'): 12.619375000000002,
            ('a0', 'a2'): 25.238750000000003,
            ('a0', 'a1'): 50.477500000000006,
            ('a7', 'b7'): 0.0013397216796875,
            ('a6', 'b7'): 0.002679443359375,
            ('a7', 'b6'): 0.002679443359375,
            ('a5', 'b7'): 0.00535888671875,
            ('a6', 'b6'): 0.00535888671875,
            ('a7', 'b5'): 0.00535888671875,
            ('a4', 'b7'): 0.0107177734375,
            ('a5', 'b6'): 0.0107177734375,
            ('a6', 'b5'): 0.0107177734375,
            ('a7', 'b4'): 0.0107177734375,
            ('a3', 'b7'): 0.021435546875,
            ('a4', 'b6'): 0.021435546875,
            ('a5', 'b5'): 0.021435546875,
            ('a6', 'b4'): 0.021435546875,
            ('a7', 'b3'): 0.021435546875,
            ('a2', 'b7'): 0.04287109375,
            ('a3', 'b6'): 0.04287109375,
            ('a4', 'b5'): 0.04287109375,
            ('a5', 'b4'): 0.04287109375,
            ('a6', 'b3'): 0.04287109375,
            ('a7', 'b2'): 0.04287109375,
            ('a1', 'b7'): 0.0857421875,
            ('a2', 'b6'): 0.0857421875,
            ('a3', 'b5'): 0.0857421875,
            ('a4', 'b4'): 0.0857421875,
            ('a5', 'b3'): 0.0857421875,
            ('a6', 'b2'): 0.0857421875,
            ('a7', 'b1'): 0.0857421875,
            ('a0', 'b7'): 0.171484375,
            ('a1', 'b6'): 0.171484375,
            ('a2', 'b5'): 0.171484375,
            ('a3', 'b4'): 0.171484375,
            ('a4', 'b3'): 0.171484375,
            ('a5', 'b2'): 0.171484375,
            ('a6', 'b1'): 0.171484375,
            ('a7', 'b0'): 0.171484375,
            ('a0', 'b6'): 0.34296875,
            ('a1', 'b5'): 0.34296875,
            ('a2', 'b4'): 0.34296875,
            ('a3', 'b3'): 0.34296875,
            ('a4', 'b2'): 0.34296875,
            ('a5', 'b1'): 0.34296875,
            ('a6', 'b0'): 0.34296875,
            ('a0', 'b5'): 0.6859375,
            ('a1', 'b4'): 0.6859375,
            ('a2', 'b3'): 0.6859375,
            ('a3', 'b2'): 0.6859375,
            ('a4', 'b1'): 0.6859375,
            ('a5', 'b0'): 0.6859375,
            ('a0', 'b4'): 1.371875,
            ('a1', 'b3'): 1.371875,
            ('a2', 'b2'): 1.371875,
            ('a3', 'b1'): 1.371875,
            ('a4', 'b0'): 1.371875,
            ('a0', 'b3'): 2.74375,
            ('a1', 'b2'): 2.74375,
            ('a2', 'b1'): 2.74375,
            ('a3', 'b0'): 2.74375,
            ('a0', 'b2'): 5.4875,
            ('a1', 'b1'): 5.4875,
            ('a2', 'b0'): 5.4875,
            ('a0', 'b1'): 10.975,
            ('a1', 'b0'): 10.975,
            ('a0', 'b0'): 21.95,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 171.475400000000)

    def test_linear_regression2(self):
        #aを2進数（8bit）で表す、10～20で規格化
        a = symbols_nbit(10, 20, 'a{}', num=8)
        #bを2進数（8bit）で表す、0～1で規格化
        b = symbols_nbit(0, 1, 'b{}', num=8)

        #誤差二乗ペナルティ
        H = 0
        H += (5.75 - (a*0.31 + b))**2
        H += (8.56 - (a*0.4 + b))**2
        H += (8.42 - (a*0.47 + b))**2
        H += (7.78 - (a*0.4 + b))**2
        H += (10.25 - (a*0.54 + b))**2
        H += (6.79 - (a*0.36 + b))**2
        H += (11.51 - (a*0.56 + b))**2
        H += (7.66 - (a*0.43 + b))**2
        H += (6.99 - (a*0.32 + b))**2
        H += (10.61 - (a*0.6 + b))**2


        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('a0', 'a0'): -570.04,
            ('b0', 'b0'): -81.82,
            ('b1', 'b1'): -41.535,
            ('b2', 'b2'): -20.92375,
            ('b3', 'b3'): -10.5009375,
            ('b4', 'b4'): -5.260234375,
            ('b5', 'b5'): -2.63255859375,
            ('b6', 'b6'): -1.3168896484375,
            ('b7', 'b7'): -0.658597412109375,
            ('a4', 'a4'): -47.4581640625,
            ('a7', 'a7'): -6.018535766601563,
            ('a2', 'a2'): -180.36812500000002,
            ('a3', 'a3'): -93.33890625000001,
            ('a6', 'a6'): -12.01242431640625,
            ('a1', 'a1'): -335.4975,
            ('a5', 'a5'): -23.926259765625,
            ('b6', 'b7'): 0.0006103515625,
            ('b5', 'b7'): 0.001220703125,
            ('b4', 'b7'): 0.00244140625,
            ('b5', 'b6'): 0.00244140625,
            ('b3', 'b7'): 0.0048828125,
            ('b4', 'b6'): 0.0048828125,
            ('b2', 'b7'): 0.009765625,
            ('b3', 'b6'): 0.009765625,
            ('b4', 'b5'): 0.009765625,
            ('b1', 'b7'): 0.01953125,
            ('b2', 'b6'): 0.01953125,
            ('b3', 'b5'): 0.01953125,
            ('b0', 'b7'): 0.0390625,
            ('b1', 'b6'): 0.0390625,
            ('b2', 'b5'): 0.0390625,
            ('b3', 'b4'): 0.0390625,
            ('b0', 'b6'): 0.078125,
            ('b1', 'b5'): 0.078125,
            ('b2', 'b4'): 0.078125,
            ('b0', 'b5'): 0.15625,
            ('b1', 'b4'): 0.15625,
            ('b2', 'b3'): 0.15625,
            ('b0', 'b4'): 0.3125,
            ('b1', 'b3'): 0.3125,
            ('b0', 'b3'): 0.625,
            ('b1', 'b2'): 0.625,
            ('b0', 'b2'): 1.25,
            ('b0', 'b1'): 2.5,
            ('a6', 'a7'): 0.049294433593750006,
            ('a5', 'a7'): 0.09858886718750001,
            ('a4', 'a7'): 0.19717773437500002,
            ('a5', 'a6'): 0.19717773437500002,
            ('a3', 'a7'): 0.39435546875000005,
            ('a4', 'a6'): 0.39435546875000005,
            ('a2', 'a7'): 0.7887109375000001,
            ('a3', 'a6'): 0.7887109375000001,
            ('a4', 'a5'): 0.7887109375000001,
            ('a1', 'a7'): 1.5774218750000002,
            ('a2', 'a6'): 1.5774218750000002,
            ('a3', 'a5'): 1.5774218750000002,
            ('a0', 'a7'): 3.1548437500000004,
            ('a1', 'a6'): 3.1548437500000004,
            ('a2', 'a5'): 3.1548437500000004,
            ('a3', 'a4'): 3.1548437500000004,
            ('a0', 'a6'): 6.309687500000001,
            ('a1', 'a5'): 6.309687500000001,
            ('a2', 'a4'): 6.309687500000001,
            ('a0', 'a5'): 12.619375000000002,
            ('a1', 'a4'): 12.619375000000002,
            ('a2', 'a3'): 12.619375000000002,
            ('a0', 'a4'): 25.238750000000003,
            ('a1', 'a3'): 25.238750000000003,
            ('a0', 'a3'): 50.477500000000006,
            ('a1', 'a2'): 50.477500000000006,
            ('a0', 'a2'): 100.95500000000001,
            ('a0', 'a1'): 201.91000000000003,
            ('a7', 'b7'): 0.002679443359375,
            ('a6', 'b7'): 0.00535888671875,
            ('a7', 'b6'): 0.00535888671875,
            ('a5', 'b7'): 0.0107177734375,
            ('a6', 'b6'): 0.0107177734375,
            ('a7', 'b5'): 0.0107177734375,
            ('a4', 'b7'): 0.021435546875,
            ('a5', 'b6'): 0.021435546875,
            ('a6', 'b5'): 0.021435546875,
            ('a7', 'b4'): 0.021435546875,
            ('a3', 'b7'): 0.04287109375,
            ('a4', 'b6'): 0.04287109375,
            ('a5', 'b5'): 0.04287109375,
            ('a6', 'b4'): 0.04287109375,
            ('a7', 'b3'): 0.04287109375,
            ('a2', 'b7'): 0.0857421875,
            ('a3', 'b6'): 0.0857421875,
            ('a4', 'b5'): 0.0857421875,
            ('a5', 'b4'): 0.0857421875,
            ('a6', 'b3'): 0.0857421875,
            ('a7', 'b2'): 0.0857421875,
            ('a1', 'b7'): 0.171484375,
            ('a2', 'b6'): 0.171484375,
            ('a3', 'b5'): 0.171484375,
            ('a4', 'b4'): 0.171484375,
            ('a5', 'b3'): 0.171484375,
            ('a6', 'b2'): 0.171484375,
            ('a7', 'b1'): 0.171484375,
            ('a0', 'b7'): 0.34296875,
            ('a1', 'b6'): 0.34296875,
            ('a2', 'b5'): 0.34296875,
            ('a3', 'b4'): 0.34296875,
            ('a4', 'b3'): 0.34296875,
            ('a5', 'b2'): 0.34296875,
            ('a6', 'b1'): 0.34296875,
            ('a7', 'b0'): 0.34296875,
            ('a0', 'b6'): 0.6859375,
            ('a1', 'b5'): 0.6859375,
            ('a2', 'b4'): 0.6859375,
            ('a3', 'b3'): 0.6859375,
            ('a4', 'b2'): 0.6859375,
            ('a5', 'b1'): 0.6859375,
            ('a6', 'b0'): 0.6859375,
            ('a0', 'b5'): 1.371875,
            ('a1', 'b4'): 1.371875,
            ('a2', 'b3'): 1.371875,
            ('a3', 'b2'): 1.371875,
            ('a4', 'b1'): 1.371875,
            ('a5', 'b0'): 1.371875,
            ('a0', 'b4'): 2.74375,
            ('a1', 'b3'): 2.74375,
            ('a2', 'b2'): 2.74375,
            ('a3', 'b1'): 2.74375,
            ('a4', 'b0'): 2.74375,
            ('a0', 'b3'): 5.4875,
            ('a1', 'b2'): 5.4875,
            ('a2', 'b1'): 5.4875,
            ('a3', 'b0'): 5.4875,
            ('a0', 'b2'): 10.975,
            ('a1', 'b1'): 10.975,
            ('a2', 'b0'): 10.975,
            ('a0', 'b1'): 21.95,
            ('a1', 'b0'): 21.95,
            ('a0', 'b0'): 43.9,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 741.515400000000)

    def test_napzak1(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')
        q3 = symbols('q3')
        q4 = symbols('q4')
        q5 = symbols('q5')
        q6 = symbols('q6')

        #7個のドリンクをそれぞれ取るか取らないか、値段を係数にして合計が15になる（強い条件）
        H = 0
        H += (4*q0 + 4*q1 + 4*q2 + 6*q3 + 6*q4 + 7*q5 + 7*q6 - 15)**2

        #7個のドリンクをそれぞれ取るか取らないか、回復量を係数にして報酬とする（弱い条件）
        H += -0.01 * (3*q0 + 3*q1 + 3*q2 + 5*q3 + 5*q4 + 7*q5 + 7*q6)

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('q3', 'q3'): -144.05,
            ('q4', 'q4'): -144.05,
            ('q5', 'q5'): -161.07,
            ('q6', 'q6'): -161.07,
            ('q0', 'q0'): -104.03,
            ('q1', 'q1'): -104.03,
            ('q2', 'q2'): -104.03,
            ('q0', 'q1'): 32.0,
            ('q0', 'q2'): 32.0,
            ('q1', 'q2'): 32.0,
            ('q0', 'q3'): 48.0,
            ('q0', 'q4'): 48.0,
            ('q1', 'q3'): 48.0,
            ('q1', 'q4'): 48.0,
            ('q2', 'q3'): 48.0,
            ('q2', 'q4'): 48.0,
            ('q0', 'q5'): 56.0,
            ('q0', 'q6'): 56.0,
            ('q1', 'q5'): 56.0,
            ('q1', 'q6'): 56.0,
            ('q2', 'q5'): 56.0,
            ('q2', 'q6'): 56.0,
            ('q3', 'q4'): 72.0,
            ('q3', 'q5'): 84.0,
            ('q3', 'q6'): 84.0,
            ('q4', 'q5'): 84.0,
            ('q4', 'q6'): 84.0,
            ('q5', 'q6'): 98.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 225)

    def test_napzak2(self):
        #量子ビットを用意する
        q0 = symbols('q0')
        q1 = symbols('q1')
        q2 = symbols('q2')
        q3 = symbols('q3')
        q4 = symbols('q4')
        q5 = symbols('q5')
        q6 = symbols('q6')

        #補助ビットを用意する
        s0 = symbols('s0')
        s1 = symbols('s1')
        s2 = symbols('s2')
        s3 = symbols('s3')

        #補助ビットをワンホットにする（強い条件）
        #これにより (12*s0 + 13*s1 + 14*s2 + 15*s3) で 「12 or 13 or 14 or 15」 を表現できる
        H = 0
        H += (s0 + s1 + s2 + s3 - 1)**2

        #7個のドリンクをそれぞれ取るか取らないか、値段を係数にして合計が「12 or 13 or 14 or 15」になる（強い条件）
        H += (4*q0 + 4*q1 + 4*q2 + 6*q3 + 6*q4 + 7*q5 + 7*q6 - (12*s0 + 13*s1 + 14*s2 + 15*s3))**2

        #7個のドリンクをそれぞれ取るか取らないか、回復量を係数にして報酬とする（弱い条件）
        H += -0.01 * (3*q0 + 3*q1 + 3*q2 + 5*q3 + 5*q4 + 7*q5 + 7*q6)

        #おいしいみずを降順にする
        H += (1 - q0) * q1
        H += (1 - q1) * q2
        #サイコソーダを降順にする
        H += (1 - q3) * q4
        #ミックスオレを降順にする
        H += (1 - q5) * q6

        #コンパイル
        qubo, offset = Compile(H).get_qubo()
        expected_qubo_matrix = {
            ('s0', 's0'): 143.0,
            ('s1', 's1'): 168.0,
            ('s2', 's2'): 195.0,
            ('s3', 's3'): 224.0,
            ('q1', 'q1'): 16.97,
            ('q2', 'q2'): 16.97,
            ('q3', 'q3'): 35.95,
            ('q4', 'q4'): 36.95,
            ('q5', 'q5'): 48.93,
            ('q6', 'q6'): 49.93,
            ('q0', 'q0'): 15.97,
            ('q5', 's3'): -210.0,
            ('q6', 's3'): -210.0,
            ('q5', 's2'): -196.0,
            ('q6', 's2'): -196.0,
            ('q5', 's1'): -182.0,
            ('q6', 's1'): -182.0,
            ('q3', 's3'): -180.0,
            ('q4', 's3'): -180.0,
            ('q3', 's2'): -168.0,
            ('q4', 's2'): -168.0,
            ('q5', 's0'): -168.0,
            ('q6', 's0'): -168.0,
            ('q3', 's1'): -156.0,
            ('q4', 's1'): -156.0,
            ('q3', 's0'): -144.0,
            ('q4', 's0'): -144.0,
            ('q0', 's3'): -120.0,
            ('q1', 's3'): -120.0,
            ('q2', 's3'): -120.0,
            ('q0', 's2'): -112.0,
            ('q1', 's2'): -112.0,
            ('q2', 's2'): -112.0,
            ('q0', 's1'): -104.0,
            ('q1', 's1'): -104.0,
            ('q2', 's1'): -104.0,
            ('q0', 's0'): -96.0,
            ('q1', 's0'): -96.0,
            ('q2', 's0'): -96.0,
            ('q0', 'q1'): 31.0,
            ('q1', 'q2'): 31.0,
            ('q0', 'q2'): 32.0,
            ('q0', 'q3'): 48.0,
            ('q0', 'q4'): 48.0,
            ('q1', 'q3'): 48.0,
            ('q1', 'q4'): 48.0,
            ('q2', 'q3'): 48.0,
            ('q2', 'q4'): 48.0,
            ('q0', 'q5'): 56.0,
            ('q0', 'q6'): 56.0,
            ('q1', 'q5'): 56.0,
            ('q1', 'q6'): 56.0,
            ('q2', 'q5'): 56.0,
            ('q2', 'q6'): 56.0,
            ('q3', 'q4'): 71.0,
            ('q3', 'q5'): 84.0,
            ('q3', 'q6'): 84.0,
            ('q4', 'q5'): 84.0,
            ('q4', 'q6'): 84.0,
            ('q5', 'q6'): 97.0,
            ('s0', 's1'): 314.0,
            ('s0', 's2'): 338.0,
            ('s0', 's3'): 362.0,
            ('s1', 's2'): 366.0,
            ('s1', 's3'): 392.0,
            ('s2', 's3'): 422.0,
        }
        self.assertTrue(are_same_qubo_matrices(qubo, expected_qubo_matrix))
        self.assertEqual(offset, 1)
